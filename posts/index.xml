<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ronrei.com</title>
    <link>https://jaqmol.github.io/posts/</link>
    <description>Recent content in Posts on ronrei.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 03 May 2020 12:58:35 +0200</lastBuildDate>
    
	<atom:link href="https://jaqmol.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Better Without Pure OOP</title>
      <link>https://jaqmol.github.io/posts/better-without-pure-oop/</link>
      <pubDate>Sun, 03 May 2020 12:58:35 +0200</pubDate>
      
      <guid>https://jaqmol.github.io/posts/better-without-pure-oop/</guid>
      <description>How software is better without OOP In the last article the claim was that OOP as a mental model over-complicates reasoning about the technical challenges that have to be faced in programming and software architecture. Object oriented software projects on enterprise level, that had some time to ripen, often end up with an uncanny resemblance to a Rube Goldberg machine, not unlike the one shown in the video below:
    As a quick reminder here are the core values that we need to follow in order to maintain a high quality in how we do software:</description>
    </item>
    
    <item>
      <title>How helpful is pure OOP?</title>
      <link>https://jaqmol.github.io/posts/how-helpful-is-pure-oop/</link>
      <pubDate>Sun, 12 Apr 2020 16:50:28 +0200</pubDate>
      
      <guid>https://jaqmol.github.io/posts/how-helpful-is-pure-oop/</guid>
      <description>Re-evaluating core OOP concepts If we want to be open and have a critical look at OOP we have to first define the core values that actually matter to keep up implementation effectiveness, maintainability, extendability and code reuse. Why should we care about implementation effectiveness, maintainability, extendability and code reuse? Because if we score badly in this fields, our software will inevitably be more expensive (time-wise and money-wise) to write, maintain and extend.</description>
    </item>
    
    <item>
      <title>Alan Kay Disapproves of OOP</title>
      <link>https://jaqmol.github.io/posts/alan-kay-disapproves-of-oop/</link>
      <pubDate>Sun, 29 Mar 2020 13:32:31 +0200</pubDate>
      
      <guid>https://jaqmol.github.io/posts/alan-kay-disapproves-of-oop/</guid>
      <description>The Inventor of Object Orientation Disapproves of OOP Imagine there had been a couple of people, somewhere buried in the past, that basically invented the complete foundation of technologies our modern reality is built upon (and will continue to do so for the foreseeable future). Sounds like a cheesy creation myth? But it&amp;rsquo;s not; it&amp;rsquo;s actually what happened at Xerox PARC starting in the 1970th. Here&amp;rsquo;s a list of some of the notable names from the early days of PARC:</description>
    </item>
    
  </channel>
</rss>